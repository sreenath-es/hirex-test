services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ./src:/app/src:delegated
      - ./prisma:/app/prisma:delegated
      - ./package.json:/app/package.json:delegated
      - ./tsconfig.json:/app/tsconfig.json:delegated
      - ./scripts:/app/scripts:delegated
      - ./tsconfig.scripts.json:/app/tsconfig.scripts.json:delegated
      - ./nodemon.json:/app/nodemon.json:delegated
      - api_node_modules:/app/node_modules
      - api_dist:/app/dist
    env_file: .env
    ports:
      - "4300:4300"
    environment:
      - NODE_ENV=development
      - PORT=4300
      - MYSQL_DATABASE_URL=mysql://express-boilerplate:express-boilerplate@db:3306/express-boilerplate
      - RUN_SEEDS=true
      - PROMETHEUS_USER=${PROMETHEUS_USER:-admin}
      - PROMETHEUS_PASSWORD=${PROMETHEUS_PASSWORD:-admin}
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
    depends_on:
      db:
        condition: service_healthy
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
    command: >
      sh -c "
        mkdir -p /app/node_modules/.prisma &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        if [ \"$$RUN_SEEDS\" = \"true\" ]; then npm run seed:dev; fi &&
        npx nodemon
      "
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:4300/monitoring/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  db:
    image: mysql:8.0
    env_file: .env
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-express-boilerplate}
      MYSQL_USER: ${MYSQL_USER:-express-boilerplate}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-express-boilerplate}
    volumes:
      - mysql_data:/var/lib/mysql:delegated
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-simple-json-datasource
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=1s
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_LOG_LEVEL=debug
      - GF_LOG_MODE=console
    volumes:
      - grafana_data:/var/lib/grafana
      - ./data/grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - app-network
    user: "472"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./data/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - app-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  api_node_modules:
    driver: local
  api_dist:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  app-network:
    driver: bridge 